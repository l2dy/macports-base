#!@TCLSH@
# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

# Initialize distfiles table in registry.

package require macports 1.0
package require registry2 2.0

mportinit

if {[registry::metadata get distfiles_update_needed] == 1} {
    set portfiles_dir [file join ${macports::registry.path} registry portfiles]

    registry::write {
        set installed_ports [registry::entry imaged]
        foreach portref $installed_ports {
            # Get mport reference
            try -pass_signal {
                # TODO: properly set ${filespath} to recognize patch files in tree
                set mport [mportopen_installed [$portref name] [$portref version] [$portref revision] [$portref variants] {}]
            } catch {{*} eCode eMessage} {
                ui_warn [msgcat::mc "Failed to open port %s from registry: %s" [$portref name] $eMessage]
                registry::entry close $portref
                continue
            }

            # Setup sub-Tcl-interpreter that executed the installed port
            set workername [ditem_key $mport workername]

            $workername eval {set fetch_urls {}}
            $workername eval {portfetch::checkfiles fetch_urls}

            # Append that port's distfiles to the list
            set fetch_urls      [$workername eval {set fetch_urls}]
            set has_distfiles   [$workername eval {info exists all_dist_files}]

            if {$has_distfiles} {
                set dist_subdir [$workername eval {set dist_subdir}]
                set distfileList {}

                foreach {url_var distfile} $fetch_urls {
                    lappend distfileList $distfile
                }
                $portref distmap $dist_subdir $distfileList
            }

            mportclose $mport
            registry::entry close $portref
        }
        registry::metadata del distfiles_update_needed
    }
}

exit 0
